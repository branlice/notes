// Comma
// 注意相同的属性名后面有一个 + 号
// ----------------------------------------------------------------
.mixin {
  box-shadow+: inset 0 0 10px #555;
}
.test {
  .mixin();
  box-shadow+: 0 0 20px black;
}

// 结果
.test {
  box-shadow: inset 0 0 10px #555, 0 0 20px black;
}

// Space
// 注意：相同的属性名后面有一个 +_ 号
// ----------------------------------------------------------------
// Language: less
.mixin() {
  transform+_: scale(2);
}
.test {
  .mixin();
  transform+_: rotate(15deg);
}
// 结果
.test {
  transform: scale(2) rotate(15deg);
}

// Mixins
// 把已有的 class/id作为 mixin
// ----------------------------------------------------------------
.a,
#b {
  color: red;
}
.mixin-class {
  .a();
}
.mixin-id {
  #b();
}

// Selectors in Mixins
// -----------------------------------------------------------
.my-hover-mixin() {
  &:hover {
    border: 1px solid red;
  }
}
button {
  .my-hover-mixin();
}

// 结果
button:hover {
  border: 1px solid red;
}

// Namespaces
// -----------------------------------------------------------
.my-namespace {
  .my-namespace-mixin {
    color: red;
  }
}

#my-namespace-2 {
  .my-namespace-mixin {
    background-color: antiquewhite;
  }
}
#my-namespace-2 {
  .my-namespace-mixin() {
    background-color: antiquewhite;
  }
}

// usage
.test {
  .my-namespace.my-namespace-mixin();
  #my-namespace-2.my-namespace-mixin();
}
// 结果
.test {
  color: red;
  background-color: antiquewhite;
}

// 受保护的 NameSpace
// 当条件位真时候才生效， @size是变量
// -----------------------------------------------------------------
.my-namespace-3 when(@size = 100px) {
  .mixin() {
    border: 2px saddlebrown salmon;
  }
}
.my-namespace-3 {
  .mixin() when(@size = 100px) {
    border: 2px saddlebrown salmon;
  }
}
// usage
@size: 100px;
.test {
  .my-namespace-3.mixin();
}
// 结果
.test {
  border: 2px saddlebrown salmon;
}

// !important关键字
// 在 mixin 中使用 !important 关键字, 会使得所有的属性都被 !important
// -----------------------------------------------------------
.no-important {
  color: red;
  background-color: aquamarine;
}
// usage
.test {
  .no-important() !important;
}
// 结果
.test {
  color: red !important;
  background-color: aquamarine !important;
}

// 重载mixin
// 定义多个具有相同名称和参数数量的 mixin 是合法的。Less 将使用所有可以应用的属性。如果你使用带有一个参数的 mixin，例如.mixin(green);，那么所有带有一个强制参数的 mixin 的属性都将被使用
// -----------------------------------------------------------
.mixin(@color) {
  color-1: @color;
}
.mixin(@color, @padding: 2) {
  color-2: @color;
  padding-2: @padding;
}
.mixin(@color, @padding, @margin: 2) {
  color-3: @color;
  padding-3: @padding;
  margin: @margin @margin @margin @margin;
}
.some .selector div {
  .mixin(#008000);
}

// 结果
.some .selector div {
  color-1: #008000;
  color-2: #008000;
  padding-2: 2;
}

// 命名参数
// mixin 引用可以通过名称提供参数值，而不仅仅是位置。任何参数都可以通过其名称引用，并且它们不必按任何特殊顺序：
// -----------------------------------------------------------
.mixin(@color: black; @margin: 10px; @padding: 20px) {
  color: @color;
  margin: @margin;
  padding: @padding;
}
.class1 {
  .mixin(@margin: 20px; @color: #33acfe);
}
.class2 {
  .mixin(#efca44; @padding: 40px);
}
// 结果
.class1 {
  color: #33acfe;
  margin: 20px;
  padding: 20px;
}
.class2 {
  color: #efca44;
  margin: 10px;
  padding: 40px;
}
